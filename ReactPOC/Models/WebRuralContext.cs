// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ReactPOC.Models;

public partial class WebRuralContext : DbContext
{
    public WebRuralContext()
    {
    }

    public WebRuralContext(DbContextOptions<WebRuralContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Eventos> Eventos { get; set; }

    public virtual DbSet<Expositores> Expositores { get; set; }

    public virtual DbSet<Ingresos> Ingresos { get; set; }

    public virtual DbSet<TipoIngreso> TipoIngreso { get; set; }

    public virtual DbSet<Usuarios> Usuarios { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.\\sqlexpress;Initial Catalog=WebRural;Integrated Security=True;persist security info=True;user id=sa;password=Golf2027;MultipleActiveResultSets=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Eventos>(entity =>
        {
            entity.HasOne(d => d.id_tipoIngresoNavigation).WithMany(p => p.Eventos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Eventos_TipoIngreso");
        });

        modelBuilder.Entity<Expositores>(entity =>
        {
            entity.HasOne(d => d.id_eventoNavigation).WithMany(p => p.Expositores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expositores_Eventos");

            entity.HasOne(d => d.id_tipoIngresoNavigation).WithMany(p => p.Expositores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Expositores_TipoIngreso");
        });

        modelBuilder.Entity<Ingresos>(entity =>
        {
            //entity.Property(e => e.id).ValueGeneratedNever();

            entity.HasOne(d => d.id_eventoNavigation).WithMany(p => p.Ingresos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ingresos_Eventos");

            entity.HasOne(d => d.id_expositorNavigation).WithMany(p => p.Ingresos)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ingresos_Expositores");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}